1. 匈牙利类型标记法

2. 数据类型
		基本数据类型：Number  String Bollean  Null Undefined
		引用数据类型：object
		
		注意NaN属于Number,  字符串转换数字失效时返回
		NaN参与的所有的运算都是false，除了!=
		
		
		typeof()
		
		与(&&) 或(||) 非(!=)  等价于python中的 and or not
		

3. for循环基本格式
	for (初始化；条件；增量){
		语句1；
		 ....
	}
	
4. finally {
		// 无论try中代码是否有异常抛出(甚至是try代码块中有return语句)，finally代码块中始终会被执行。
	}

对象：function(all)

//Javascript三种对象方式
//    1.ECMAScript
//    1.1 native object
//    1.2 host object
//    2.DOM
//    3.BOM

// ------------function对象------------

// function创建方式1 (推荐方式)
//    function func1() {
//        alert(123);
//        return 8
//    }
//    var ret=func1()
//    alert(ret)

//    var func2=new Function ("参数1","参数n","函数体");

//    var add=new Function("a","b","alert(a+b)");
//   alert(void(add(1,2)));
//
//    alert(add.length)

// --------------function属性和方法---------------------

//function f(){
//        return 8;
//}
//alert(void (f()))
//function func1() {
////    var b=3;(尽量采用局部变量)
//    b=4;
//}
//func1();
//alert(b)

//var ret=0;
//function func1(a,b){
//    ret=a+b;
//    return ret
//}
//alert(func1(1,5,6))

//    function a(a,b) {
//        alert(a+b);
//    }
//    var a=1;
//    var b=2;
//    a(a,b)



    // ---------arguments对象-----------
//    var ret=0;
//    function add() {
//        alert(arguments.length)
//        console.log(arguments.length);
//        console.log(arguments);
//        for (var i in arguments){
//            ret+=arguments[i];
//
//        }
//        return ret;
//    }
//    alert(add(1,2,3,4,5))

//    function func2() {
//        if (arguments.length!=3){
//            throw new Error("param should be 3")
//        }
//    }
//    func2(1,2,3,45)

//-------------匿名函数----------------
//var func3=function () {
//    alert(123)
//};
//
//func3()

//    ----------------自执行函数------------
(function (arg) {
    console.log(arg)
})('123')