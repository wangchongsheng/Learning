python 编程可选择：①函数编程 ②面向对象编程

①函数编程能完成所有编程的工作

定义：
①函数：
    def+函数名（参数）

②面向对象：
    class ==》 类
    def   ==>  方法
    方法的第一个参数必须为self
执行:
①函数：
    函数名(参数)
②面向对象：
    o == Bar()创建一个中间人，对象
    o.foo()


例：
class 类名：
    def 方法名(self,arg):
        print(arg)
中间人 = 类名()
中间人.方法名(1)


面向对象三大特征之一：封装

构造方法：
特殊作用：
    在
        obj = 类名（）
           #创建对象
           #通过对象执行类中的一个特殊方法


1.如何创建类：
    class 类名：
        pass

2.创建方法
    构造方法，__init__(self,arg)
        obj = 类('a1')
    普通方法
        obj = 类（‘’‘）
        obj.普通方法（）

3.适用场景：
    如果多个函数中有一些相同参数时，转换成面向对象

面向对象三大特性之二：继承

1、继承
    class 父类：
        pass

    class 子类(父类)：
        pass
2、重写
    只继承父类的部分方法

3、self永远是执行改方法的调用者

4、同时执行子类和父类的方法
    super（子类，self）.父类中的方法()
    父类名.父类中的方法(self,...)

5、python中支持多继承
    a.左侧优先
    b.一直走到底
    c.同一个根时，最后执行根

6、面向对象三大特性之三：多态
====》原生多态
================面向对象中高级========================
class Foo:
    def __init__(self.name):
        #普通字段，属于对象
        self.name = name
    #普通方法
    def show(self):
        print(self.name)



类成员：
    #字段
        - 普通字段，保存在对象（obj）中,执行只能通过对象访问
        - 静态字段，保存在类中，       执行时可以通过对象也可以通过类访问。
    #方法
        - 普通方法，保存在类中，由对象来调用，self ==>对象
        - 静态方法，保存在类中，由类直接调用
        -   类方法，保存在类中，由类直接调用，cls ==> 当前类

    #应用场景：
        如果需要在对象中保存一些值，执行某功能的时候，需要使用对象中的值  --》普通方法
        不需要任何对象中的值，静态方法

    #属性，特性
        - 不伦不类