Day 36
=======================================
知识回顾
1、增删改查
2、其他：
		分组：
			group by
			xxx 	having  聚合条件...
		
		分页：
			前几行, select .... limit 3;
			limit 3,4		 #第三行开始，取4行
			limit 4 offset 3 # 。。。
			
		连表：
			left outer join on
			# 表1 left join 表2 on
			# 如果表1中的数据多，表2少，null
			
			right outer join
			
			inner join
			#如果表1中的数据多，表2少，null
		
		排序：
			desc
			asc
			
			nid		name
			 1		alice
			 2		eric
			 3		alex
			 4		tony
			 # 从小到底，id从小到大排序
			 select * from tb order by name asc ,nid desc,sid asc;
		
		union
		
		条件：
			> < = >= != <=
			in(1,2,3,4)
			not in (...)
			in (select nid from tb)
3、连表、外键 ****
	一对多
	
=================



一、Navicat
	上一节：基于命令操作
	Navicat，用于连接数据库
			- 查找
			- 修改
			- 根性
			....
			# 可视化操作：--->sql语句
			
	安装Navicat
	
	简化简单操作：
		创建表
		修改表结构
		插入
		查询
		更新
		删除
	复杂操作：
	。。。
	查询编辑器
	
	====》 
	a = input('请输入用户名：')
	b = input('请输入密码：')
	c = input('请输入邮箱：')
	
	insert table userinfo(name,pwd,email) values(a,b,c)
	
	
	
	
二、练习题
	- 练习
	
		数据库：
			导入
			导出
		命令：
			mysqldump -uroot -p666 dbname > 123.sql
			mysqldump -uroot -p666 dbname < 123.sql
		1、导入数据
			mysqldump
		2、 。。。
		3、
			-- avg获取平均数
				select student_id,avg(num) from score GROUP BY student_id HAVING avg(num) > 60
			-- 连表查询
				select * from socre join on stundent on socre.student_id = stundent.sid
				
			-- 临时表
				select * from (select nid,name,age from tb1 where id > 10) as t
		4、
			查找姓李的老师
				select tid,tname from teacher where tname like "李%"
			查找姓李的老师的个数
				select COUNT(tid) as c  from teacher where tname like "李%"
		5、查询学习课程编号1又学习课程编号2的学生
			SELECT B.student_id, COUNT(B.student_id) FROM (SELECT student_id,course_id FROM score WHERE course_id = 1 OR course_id = 2) AS B
			GROUP BY B.student_id HAVING count(B.student_id) > 1;
		
		6、查询学过李平老师所教的课程
			SELECT student_id from score WHERE course_id in (
				SELECT cid from course left JOIN teacher on course.teacher_id = teacher.tid WHERE teacher.tname ="李平老师"
			) GROUP BY  student_id
		
		7、查询课程成绩小于60分的学生学号以及姓名：
			- group by
			SELECT student_id,sname from (SELECT student_id from score where num < 60 GROUP BY student_id) as S
			LEFT JOIN student on S.student_id = student.sid
			
			-  DISTINGCT 去重
			SELECT student_id,sname from (SELECT DISTINCT student_id from score WHERE num < 60) as S
			LEFT JOIN student on S.student_id = student.sid
		
		8、查询没有选全课程的同学的学号和姓名
			SELECT student_id,COUNT(student_id) from score GROUP BY student_id HAVING COUNT(student_id) < (select COUNT(1) as C from course)
		
		9、查询至少有一门课域学号001的同学所学的课程相同的同学的学号和姓名;
			SELECT student_id FROM score WHERE student_id != 1 and course_id in (SELECT course_id from score WHERE student_id = 1) GROUP BY student_id
		
		10、查询至少学过学号为001同学所有课程的其他同学的学号和姓名
			SELECT student_id,count(student_id) from score where course_id in 
			(SELECT course_id from score where student_id=1) GROUP BY student_id
			HAVING COUNT(student_id) = (SELECT COUNT(1) from score where student_id=1)
			
		11、查询与学号002所学课程相同的同学。
			SELECT student_id from score GROUP BY student_id HAVING COUNT(student_id) =
			(SELECT COUNT(1) as a  from score WHERE student_id = 2)
		
		12、删除学习"李平"老师课的score表记录
			DELETE  from score WHERE course_id in
			(SELECT cid from course left join teacher on course.teacher_id = teacher.tid WHERE tname="李平老师")
		
		13、向SC表中插入一些记录，这些记录符合一下要求：①没有上过编号“002”课程的同学学号，②插入“002”号课程的平均成绩
			
		
		14、按平均成绩从低到高显示所有学生的课程成绩，按如下形式显示： 学生ID,语文,数学,英语,有效课程数,有效平均分；
			SELECT *FROM (
			SELECT student_id,COUNT(course_id),AVG(num) AS a from score
			GROUP BY student_id HAVING COUNT(student_id) <= (SELECT COUNT(1) from student)) AS t
			ORDER BY a ASC
		
		15、按如下形式显示： 学生ID,语文,数学,英语,有效课程数,有效平均分；
			SELECT *FROM (
			SELECT student_id,COUNT(course_id),AVG(num) AS a from score
			GROUP BY student_id HAVING COUNT(student_id) <= (SELECT COUNT(1) from student)) AS t
		
		16、课程平均分从高到低显示（显示任课老师）；
			
		17、查询各科成绩前三名的记录:(不考虑成绩并列情况) 
		
		18、查询出只选修了一门课程的全部学生的学号和姓名；
		
		19、查询男生、女生的人数；
		
		20、查询每门课程的平均成绩，结果按平均成绩升序排列，平均成绩相同时，按课程号降序排列；
		
		21、查询课程名称为“数学”，且分数低于60的学生姓名和分数；
		
		22、查询选修“杨艳”老师所授课程的学生中，成绩最高的学生姓名及其成绩；
		
		23、查询每门课程成绩最好的前两名；
		
		24、查询没学过“叶平”老师讲授的任一门课程的学生姓名；
		
		24、查询全部学生都选修的课程的课程号和课程名；
	- 内容补充
三、Python操作MySQL
		pip3 install pymysql
		
		pynysql
		
			sql 。。。。
四、
作业：用户管理
	参考表结构：
		用户类型：（管理员，普通用户）
		用户信息
		权限
		用户类型&权限
	
	功能：
	
		# 登陆、注册、找回密码
		# 用户管理
		# 用户类型
		# 权限管理
		# 分配权限
		
	特别的：程序进一个可执行文件